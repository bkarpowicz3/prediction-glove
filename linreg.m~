function Y = linreg(features, labels)

R = [];
start = 1;
N = 3;
M = size(features, 1);
numFeats = size(features, 2);
featsPer = 6;                   % features/channel
numChannels = numFeats/featsPer;       % assuming 6 features per channel

R = ones(M-N, numFeats*N+1);
%for each row
for i = 1:M
    row = zeros(numFeats*N);
    row(end+1) = 1;
    %for each feature -- should this be done on features transpose? so that
    %it goes over time? not sure how to adapt here
    for j = 1:size(features, 2)
        row(end+1:end+N) = features(start:start+N-1, j);
    end 
    start = start + 1;
    R(i, :) = row;
    
    %
    for j = 1:numChannels
        idx = (j-1)*N*featsPer+2;
        R(i, idx:idx+N*featsPer-1) = features(i:i+N-1, ((j-1)*numFeats+1):
    end
end 

a = R'*R;
ainv = a / eye(size(a)); % need to compute inverse this way or else you get Inf 
B = ainv*R'*labels;
Y = R*B;

end

